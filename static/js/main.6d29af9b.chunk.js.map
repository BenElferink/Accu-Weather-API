{"version":3,"sources":["components/FiveDaysForecast/style/FiveDaysForecast.module.css","components/SearchField/style/SearchField.module.css","components/CurrentConditions/style/CurrentConditions.module.css","components/FavoritesPage/style/FavoritesPage.module.css","components/Header/style/Header.module.css","components/HomePage/style/HomePage.module.css","js/localStorage.js","components/Header/Header.jsx","api/AccuWeatherAPI.js","components/SearchField/SearchField.jsx","components/CurrentConditions/CurrentConditions.jsx","components/FiveDaysForecast/FiveDaysForecast.jsx","components/HomePage/HomePage.jsx","components/FavoritesPage/FavoritesPage.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["module","exports","getStorage","key","defaultValue","apiUrl","data","storage","JSON","parse","window","localStorage","getItem","url","a","fetch","response","json","console","log","warn","doFetch","setStorage","setItem","stringify","Header","history","useHistory","className","styles","component","onClick","push","apiKey","process","getSearchResults","cityName","query","getCurrentConditions","locationKey","getFiveDaysForecast","DailyForecasts","SearchField","setCityData","useState","searchFieldText","setSearchFieldText","searchResults","setSearchResults","doAutoComplete","e","searchText","target","value","valid","i","length","charAt","alert","bind","useEffect","input","type","placeholder","onChange","list","listItem","map","item","LocalizedName","Country","ID","Key","CurrentConditions","cityData","currentConditions","setCurrentConditions","then","apiData","IsDayTime","src","WeatherIcon","alt","Temperature","Metric","Value","Unit","Imperial","WeatherText","FiveDaysForecast","fiveDaysForecast","setFiveDaysForecast","getDayFromEpoch","epoch","Date","getDay","EpochDate","parseInt","Maximum","Minimum","wrapper","image","Day","Icon","Night","HomePage","favorites","setFavorites","useCallback","AdministrativeArea","Rank","Type","Version","button","copyOfFavorites","FavoritesPage","delete","filteredCopyOfFavorites","filter","fav","removeFromFavorites","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oGACAA,EAAOC,QAAU,CAAC,UAAY,oCAAoC,KAAO,+BAA+B,QAAU,kCAAkC,MAAQ,kC,mBCA5JD,EAAOC,QAAU,CAAC,UAAY,+BAA+B,MAAQ,2BAA2B,KAAO,0BAA0B,SAAW,gC,mBCA5ID,EAAOC,QAAU,CAAC,UAAY,uC,mBCA9BD,EAAOC,QAAU,CAAC,UAAY,iCAAiC,KAAO,4BAA4B,OAAS,gC,mBCA3GD,EAAOC,QAAU,CAAC,UAAY,4B,mBCA9BD,EAAOC,QAAU,CAAC,OAAS,2B,6JCgBpB,SAASC,EAAWC,EAAKC,EAAcC,GAC5C,IACEC,EADEC,EAAUC,KAAKC,MAAMC,OAAOC,aAAaC,QAAQT,IAGtC,MAAXI,EAGmB,QAAjBH,EAgBFE,EAda,uCAAG,WAAOO,GAAP,iBAAAC,EAAA,+EAGWC,MAAMF,GAHjB,cAGNG,EAHM,gBAIOA,EAASC,OAJhB,cAINX,EAJM,OAKZY,QAAQC,IAAR,6BAA6BN,GAAOP,GALxB,kBAMLA,GANK,yCASZY,QAAQE,KAAR,4BAA6BP,GAA7B,MATY,kBAUL,MAVK,0DAAH,qDAcNQ,CAAQhB,IAEfC,EAAOF,EACPc,QAAQC,IAAI,2BAAkBb,KAKhCA,EAAOC,EAEPW,QAAQC,IAAR,8CAAyChB,GAAOG,IAGlD,MAAoB,oBAATA,EAEFA,IAEAA,EAIJ,SAASgB,EAAWnB,EAAKG,GAC9BI,OAAOC,aAAaY,QAAQpB,EAAKK,KAAKgB,UAAUlB,IAChDY,QAAQC,IAAR,6CAAwChB,GAAOG,G,qBClDlCmB,MAVf,WACE,IAAMC,EAAUC,cAChB,OACE,yBAAQC,UAAWC,IAAOC,UAA1B,UACE,wBAAQC,QAAS,kBAAML,EAAQM,KAAK,MAApC,kBACA,wBAAQD,QAAS,kBAAML,EAAQM,KAAK,eAApC,2B,0CCPAC,EAASC,mCACfhB,QAAQC,IAAR,uCAAkCc,IAE3B,IAAME,EAAgB,uCAAG,WAAOC,GAAP,mBAAAtB,EAAA,sEAEf,uEACXuB,EAH0B,kBAGPJ,EAHO,cAGKG,GAHL,SAILrB,MAFV,uEAEuBsB,GAJR,cAItBrB,EAJsB,gBAKTA,EAASC,OALA,cAKtBX,EALsB,OAM5BY,QAAQC,IAAR,0CAA0CiB,GAAY9B,GAN1B,kBAOrBA,GAPqB,yCAuB5BY,QAAQE,KAAR,MAvB4B,kBAwBrB,SAxBqB,0DAAH,sDA4BhBkB,EAAoB,uCAAG,WAAOC,GAAP,mBAAAzB,EAAA,sEAEnB,4DACXuB,EAH8B,UAGnBE,EAHmB,mBAGGN,GAHH,SAITlB,MAFV,4DAEuBsB,GAJJ,cAI1BrB,EAJ0B,gBAKbA,EAASC,OALI,cAK1BX,EAL0B,OAMhCY,QAAQC,IAAR,8CAA8CoB,GAAejC,GAN7B,kBAOzBA,EAAK,IAPoB,yCAuBhCY,QAAQE,KAAR,MAvBgC,kBAwBzB,SAxByB,0DAAH,sDA4BpBoB,EAAmB,uCAAG,WAAOD,GAAP,mBAAAzB,EAAA,sEAElB,+DACXuB,EAH6B,UAGlBE,EAHkB,mBAGIN,GAHJ,SAIRlB,MAFV,+DAEuBsB,GAJL,cAIzBrB,EAJyB,gBAKZA,EAASC,OALG,cAKzBX,EALyB,OAM/BY,QAAQC,IAAR,6CAA6CoB,GAAejC,GAN7B,kBAOxBA,EAAKmC,gBAPmB,yCAqC/BvB,QAAQE,KAAR,MArC+B,kBAsCxB,SAtCwB,0DAAH,sDCkCjBsB,MAzFf,YAAuC,IAAD,OAAfC,EAAe,EAAfA,YAAe,EAGUC,mBAAS,IAHnB,mBAG7BC,EAH6B,KAGZC,EAHY,OAOMF,mBAAS,IAPf,mBAO7BG,EAP6B,KAOdC,EAPc,KAa9BC,EAAc,uCAAG,WAAOC,GAAP,mBAAApC,EAAA,yDACjBqC,EAAaD,EAAEE,OAAOC,MAC1BP,EAAmBK,GAEA,KAAfA,EAJiB,gBAKnBH,EAAiB,IALE,uBAQfM,GAAQ,EACHC,EAAI,EATM,YASHA,EAAIJ,EAAWK,QATZ,sBAWdL,EAAWM,OAAOF,IAAM,KAAOJ,EAAWM,OAAOF,IAAM,KACvDJ,EAAWM,OAAOF,IAAM,KAAOJ,EAAWM,OAAOF,IAAM,KAC/B,MAAzBJ,EAAWM,OAAOF,IAbH,+DAiBfD,GAAQ,EACR5C,OAAOgD,MAAM,4CAlBE,6BASoBH,IATpB,2BAwBfD,EAxBe,6BAyBjBN,EAzBiB,KA0BT9C,EA1BS,yCA2BgBiD,GA3BhB,UA4BPhB,EAAiBwB,KAAK,EAAMR,GA5BrB,wIAAH,sDA2CpB,OANAS,qBAAU,WACc,UAAlBb,GACFzB,EAAW,6BAAD,OAA8BuB,GAAmBE,KAE5D,CAACA,IAGF,sBAAKnB,UAAWC,IAAOC,UAAvB,UACE,uBACEF,UAAWC,IAAOgC,MAClBC,KAAK,OACLC,YAAY,mBACZV,MAAOR,EACPmB,SAAUf,IAGZ,qBAAKrB,UAAWC,IAAOoC,KAAvB,SACqB,UAAlBlB,EACC,qBAAKnB,UAAWC,IAAOqC,SAAvB,4CAEAnB,EAAcoB,KAAI,SAACC,GAAD,OAChB,sBAEExC,UAAWC,IAAOqC,SAClBnC,QAAS,WAEPY,EAAYyB,GACZtB,EAAmB,IACnBE,EAAiB,KAPrB,UASGoB,EAAKC,cATR,KASyBD,EAAKE,QAAQC,KAR/BH,EAAKI,c,iBCzET,SAASC,EAAT,GAA0C,IAAbC,EAAY,EAAZA,SAAY,EACJ9B,mBAAS,WADL,mBAC/C+B,EAD+C,KAC5BC,EAD4B,KAStD,OANAhB,qBAAU,WACRtB,EAAqBoC,EAASF,KAAKK,MAAK,SAACC,GACvCF,EAAqBE,QAEtB,CAACJ,IAEIC,GACN,IAAK,UACH,OAAO,qBAAK/C,UAAWC,IAAOC,UAAvB,wBAET,IAAK,QACH,OAAO,qBAAKF,UAAWC,IAAOC,UAAvB,4CAET,QACE,OACE,sBAAKF,UAAWC,IAAOC,UAAvB,UACE,+BACG4C,EAASL,cADZ,KAC6BM,EAAkBI,UAAY,MAAQ,QADnE,OAGA,qBACEC,IAAG,0DAAqDL,EAAkBM,YAAvE,QACHC,IAAI,iBAEN,8BACGP,EAAkBQ,YAAYC,OAAOC,MADxC,OACgDV,EAAkBQ,YAAYC,OAAOE,KAAM,IAD3F,KAEKX,EAAkBQ,YAAYI,SAASF,MAF5C,OAGGV,EAAkBQ,YAAYI,SAASD,KACxC,uBACCX,EAAkBa,mB,qBC/BhB,SAASC,EAAT,GAAyC,IAAbf,EAAY,EAAZA,SAAY,EACL9B,mBAAS,WADJ,mBAC9C8C,EAD8C,KAC5BC,EAD4B,KAKrD/B,qBAAU,WACRpB,EAAoBkC,EAASF,KAAKK,MAAK,SAACC,GAAD,OAAaa,EAAoBb,QACvE,CAACJ,IAGJ,IAAMkB,EAAkB,SAACC,GAEvB,OADe,IAAIC,KAAa,IAARD,GACPE,UACf,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,UACT,KAAK,EACH,MAAO,YACT,KAAK,EACH,MAAO,WACT,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,aAMb,OAAQL,GACN,IAAK,UACH,OAAO,qBAAK9D,UAAWC,IAAOC,UAAvB,wBAET,IAAK,QACH,OAAO,qBAAKF,UAAWC,IAAOC,UAAvB,4CAET,QACE,OACE,qBAAKF,UAAWC,IAAOC,UAAvB,SACG4D,EAAiBvB,KAAI,SAACC,GAAD,OACpB,sBAA0BxC,UAAWC,IAAOuC,KAA5C,UACE,6BAAKwB,EAAgBxB,EAAK4B,aAC1B,4CAGaC,UACN7B,EAAKe,YAAYe,QAAQb,MAAQ,KAAO,EAAI,IAJnD,wBAKkBY,UAAU7B,EAAKe,YAAYgB,QAAQd,MAAQ,KAAO,EAAI,IALxE,WAQA,sBAAKzD,UAAWC,IAAOuE,QAAvB,UACE,gCACE,sCACA,qBACExE,UAAWC,IAAOwE,MAClBrB,IAAG,0DAAqDZ,EAAKkC,IAAIC,KAA9D,QACHrB,IAAI,mBAGR,gCACE,wCACA,qBACEtD,UAAWC,IAAOwE,MAClBrB,IAAG,0DAAqDZ,EAAKoC,MAAMD,KAAhE,QACHrB,IAAI,wBAxBFd,EAAK4B,iBCxCZ,SAASS,EAAT,GAAgD,IAA5BC,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,aAAgB,EAE5B/D,mBAC9BgE,uBACE,kBACE1G,EAAW,8BAA+B,CACxC2G,mBAAoB,CAAEtC,GAAI,KAAMF,cAAe,YAC/CC,QAAS,CAAEC,GAAI,KAAMF,cAAe,UACpCG,IAAK,SACLH,cAAe,WACfyC,KAAM,GACNC,KAAM,OACNC,QAAS,MAEb,KAdwD,mBAErDtC,EAFqD,KAE3C/B,EAF2C,KAoB5DiB,qBAAU,WACS,UAAbc,GAAsBpD,EAAW,wBAAD,OAAyBoD,EAASF,KAAOE,KAC5E,CAACA,IAsBJ,OACE,qCACE,cAAC,EAAD,CAAa/B,YAAaA,IAC1B,wBAAQf,UAAWC,IAAOoF,OAAQlF,QAtBf,WAIrB,IAHA,IAAImF,EAAe,YAAOR,GACxBpD,GAAQ,EAEDC,EAAI,EAAGA,EAAI2D,EAAgB1D,OAAQD,IAC1C,GAAI2D,EAAgB3D,GAAGiB,MAAQE,EAASF,IAAK,CAC3ClB,GAAQ,EACR,MAIAA,GACF4D,EAAgBlF,KAAK0C,GACrBiC,EAAaO,IAEbxD,MAAM,uCAON,8BAIA,cAACe,EAAD,CAAmBC,SAAUA,IAC7B,cAACe,EAAD,CAAkBf,SAAUA,O,qBC5BnByC,MA5Bf,YAAqD,IAA5BT,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,aAQlC,OACE,mCACE,qBAAK/E,UAAWC,IAAO6E,UAAvB,SACIA,EAAUlD,OAGVkD,EAAUvC,KAAI,SAACC,GAAD,OACZ,sBAAKxC,UAAWC,IAAOuC,KAAvB,UACE,sBAAMxC,UAAWC,IAAOuF,OAAQrF,QAAS,kBAdzB,SAACQ,GAC3B,IACI8E,EADe,YAAOX,GACoBY,QAAO,SAACC,GAAD,OAASA,EAAI/C,MAAQjC,KAC1EoE,EAAaU,GAW4CG,CAAoBpD,EAAKI,MAAxE,kBAGA,cAACC,EAAD,CAAmBC,SAAUN,MAJGA,EAAKI,QAHzC,0DCuBKiD,MA9Bf,WAAe,MAEqB7E,mBAChCgE,uBAAY,kBAAM1G,EAAW,wBAAyB,MAAK,KAHhD,mBAENwG,EAFM,KAEKC,EAFL,KAWb,OAJA/C,qBAAU,WACRtC,EAAW,wBAAyBoF,KACnC,CAACA,IAGF,qBAAK9E,UAAU,MAAf,SACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,sBAAMA,UAAU,OAAhB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO8F,OAAK,EAACC,KAAK,IAAlB,SACE,cAAClB,EAAD,CAAUC,UAAWA,EAAWC,aAAcA,MAEhD,cAAC,IAAD,CAAOe,OAAK,EAACC,KAAK,aAAlB,SACE,cAAC,EAAD,CAAejB,UAAWA,EAAWC,aAAcA,iBCjBlDiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjD,MAAK,YAAkD,IAA/CkD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6d29af9b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"FiveDaysForecast_component__192bu\",\"item\":\"FiveDaysForecast_item__30UQV\",\"wrapper\":\"FiveDaysForecast_wrapper__2w3IS\",\"image\":\"FiveDaysForecast_image__1x57T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"SearchField_component__m-ZaG\",\"input\":\"SearchField_input__1qOW1\",\"list\":\"SearchField_list__2TV-M\",\"listItem\":\"SearchField_listItem__Gf9Z2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"CurrentConditions_component__g_YSa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"favorites\":\"FavoritesPage_favorites__xNFYj\",\"item\":\"FavoritesPage_item__XBQ-q\",\"delete\":\"FavoritesPage_delete__147ox\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"Header_component__3cMry\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"HomePage_button__2EzOY\"};","// * * * * *\n// Developer: Ben Elferink\n// https://github.com/belferink1996\n// * * * * *\n// How to use these functions:\n// 1) import { getStorage, setStorage } from './localStorage.js';\n//\n// To generate data on mount:\n// 2) let anyVariableOrState = getStorage( 'key', value )  <-- 'key' is a string, used for load & save to localStorage,\n//                                      - OR -                  value is anything you want it to be, it's used if storage item doesn't exist (first time setup)\n//    let anyVariableOrState = getStorage( 'key' , 'API', 'https://api.github.com' )  <-- pass 'API' as default value, and the API link is the 3rd paramater,\n//                                                                                       it'll fetch the API only if storage doesn't exist (great for APIs with limited calls, and require caching)\n// To save data when it changes do:\n// 3) React.useEffect(() => {\n//      setStorage( 'key', anyVariableOrState )\n//    }, [anyVariableOrState])\n\nexport function getStorage(key, defaultValue, apiUrl) {\n  let storage = JSON.parse(window.localStorage.getItem(key)), // get storage item\n    data; // undefined\n\n  if (storage == null) {\n    // if storage item is empty\n\n    if (defaultValue === 'API') {\n      // if 2nd parameter is 'API'\n      const doFetch = async (url) => {\n        // JavaScript function responsible for fetching and handling the data from the API\n        try {\n          const response = await fetch(url);\n          const data = await response.json();\n          console.log(`✅ -FETCHED- : ${url}`, data);\n          return data;\n        } catch (error) {\n          // fetching error\n          console.warn(`❌ -FAILED- : ${url}`, error);\n          return null;\n        }\n      };\n\n      data = doFetch(apiUrl); // data is fetch from API link (or 'null' if fetch failed)\n    } else {\n      data = defaultValue; // data is generated by given default value\n      console.log('💡 -GENERATED-', data);\n    }\n  } else {\n    // storage has data\n\n    data = storage; // data to return is taken from storage\n\n    console.log(`⤴️ -LOADED- localStorage: ${key}`, data);\n  }\n\n  if (typeof data === 'function') {\n    // defaultValue can be a return function\n    return data(); // call function -> return it's variable\n  } else {\n    return data; // return either sotrage data or generated data\n  }\n}\n\nexport function setStorage(key, data) {\n  window.localStorage.setItem(key, JSON.stringify(data)); // save storage item\n  console.log(`⤵️ -SAVED- localStorage: ${key}`, data);\n}\n","import { useHistory } from 'react-router-dom';\nimport styles from './style/Header.module.css';\n\nfunction Header() {\n  const history = useHistory();\n  return (\n    <header className={styles.component}>\n      <button onClick={() => history.push('/')}>Home</button>\n      <button onClick={() => history.push('/favorites')}>Favorites</button>\n    </header>\n  );\n}\n\nexport default Header;\n","// Limited to 50 calls per day !!!\nconst apiKey = process.env.REACT_APP_API_KEY;\nconsole.log(`🌐 -USING- apiKey: ${apiKey}`);\n\nexport const getSearchResults = async (cityName) => {\n  try {\n    const base = 'https://dataservice.accuweather.com/locations/v1/cities/autocomplete',\n      query = `?apikey=${apiKey}&q=${cityName}`;\n    const response = await fetch(base + query);\n    const data = await response.json();\n    console.log(`✅ -FETCHED- searchResults: ${cityName}`, data);\n    return data;\n    // data = [\n    //   {\n    //     AdministrativeArea: { ID: 'TA', LocalizedName: 'Tel Aviv' },\n    //     Country: { ID: 'IL', LocalizedName: 'Israel' },\n    //     Key: '215854',\n    //     LocalizedName: 'Tel Aviv',\n    //     Rank: 31,\n    //     Type: 'City',\n    //     Version: 1,\n    //   },\n    //   {...},\n    //   {...},\n    //   {...},\n    // ];\n  } catch (error) {\n    console.warn(error);\n    return 'Error';\n  }\n};\n\nexport const getCurrentConditions = async (locationKey) => {\n  try {\n    const base = 'https://dataservice.accuweather.com/currentconditions/v1/',\n      query = `${locationKey}?apikey=${apiKey}`;\n    const response = await fetch(base + query);\n    const data = await response.json();\n    console.log(`✅ -FETCHED- currentConditions: ${locationKey}`, data);\n    return data[0];\n    // data = [\n    //   {\n    //     EpochTime: 1607291460,\n    //     HasPcipitation: false,\n    //     IsDayTime: false,\n    //     Link: 'http://www.accuweather.com/en/il/tel-aviv/215854/current-weather/215854?lang=en-us',\n    //     LocalObservationDateTime: '2020-12-06T23:51:00+02:00',\n    //     MobileLink: 'http://m.accuweather.com/en/il/tel-aviv/215854/current-weather/215854?lang=en-us',\n    //     PrecipitationType: null,\n    //     Temperature: { Metric: { Value: 16.1, Unit: 'C', UnitType: 17 }, Imperial: { Value: 61, Unit: 'F', UnitType: 18 } },\n    //     WeatherIcon: 34,\n    //     WeatherText: 'Mostly clear',\n    //   },\n    // ];\n  } catch (error) {\n    console.warn(error);\n    return 'Error';\n  }\n};\n\nexport const getFiveDaysForecast = async (locationKey) => {\n  try {\n    const base = 'https://dataservice.accuweather.com/forecasts/v1/daily/5day/',\n      query = `${locationKey}?apikey=${apiKey}`;\n    const response = await fetch(base + query);\n    const data = await response.json();\n    console.log(`✅ -FETCHED- fiveDaysForecast: ${locationKey}`, data);\n    return data.DailyForecasts;\n    // data = {\n    //   DailyForecasts: [\n    //     {\n    //       Date: '2020-12-06T07:00:00+02:00',\n    //       Day: { Icon: 14, IconPhrase: 'Partly sunny w/ showers', HasPrecipitation: true, PrecipitationType: 'Rain', PrecipitationIntensity: 'Light' },\n    //       EpochDate: 1607230800,\n    //       Link: 'http://www.accuweather.com/en/il/tel-aviv/215854/daily-weather-forecast/215854?lang=en-us',\n    //       MobileLink: 'http://m.accuweather.com/en/il/tel-aviv/215854/daily-weather-forecast/215854?lang=en-us',\n    //       Night: { Icon: 38, IconPhrase: 'Mostly cloudy', HasPrecipitation: false },\n    //       Sources: ['AccuWeather'](1),\n    //       Temperature: { Minimum: { Value: 50, Unit: 'F', UnitType: 18 }, Maximum: { Value: 69, Unit: 'F', UnitType: 18 } },\n    //     },\n    //     {...},\n    //     {...},\n    //     {...},\n    //   ],\n    //   Headline: {\n    //     Category: 'rain',\n    //     EffectiveDate: '2020-12-09T07:00:00+02:00',\n    //     EffectiveEpochDate: 1607490000,\n    //     EndDate: '2020-12-09T19:00:00+02:00',\n    //     EndEpochDate: 1607533200,\n    //     Link: 'http://www.accuweather.com/en/il/tel-aviv/215854/daily-weather-forecast/215854?lang=en-us',\n    //     MobileLink: 'http://m.accuweather.com/en/il/tel-aviv/215854/extended-weather-forecast/215854?lang=en-us',\n    //     Severity: 5,\n    //     Text: 'Expect showers Wednesday',\n    //   },\n    // };\n  } catch (error) {\n    console.warn(error);\n    return 'Error';\n  }\n};\n","import { useState, useEffect } from 'react';\nimport styles from './style/SearchField.module.css';\nimport { getStorage, setStorage } from './../../js/localStorage';\nimport { getSearchResults } from '../../api/AccuWeatherAPI';\n\nfunction SearchField({ setCityData }) {\n  // default (onLoad): value = empty 'String'\n  // --> after (onChange): value = 'String'\n  const [searchFieldText, setSearchFieldText] = useState('');\n\n  // default (onLoad): value = empty [Array]\n  // --> after (fetch): value = [Array of {Objects}]\n  const [searchResults, setSearchResults] = useState([]);\n\n  // Whenever the user types in the search field, this async function is called,\n  // it checks if any data is available in localSotrage, using the search field's text,\n  // if none exists for that text, then it fetches the search-results from it's API,\n  // once fetched, the results are set to state.\n  const doAutoComplete = async (e) => {\n    let searchText = e.target.value;\n    setSearchFieldText(searchText);\n\n    if (searchText === '') {\n      setSearchResults([]);\n    } else {\n      // validate that the typed text is English\n      let valid = true;\n      for (let i = 0; i < searchText.length; i++) {\n        if (\n          (searchText.charAt(i) >= 'a' && searchText.charAt(i) <= 'z') ||\n          (searchText.charAt(i) >= 'A' && searchText.charAt(i) <= 'Z') ||\n          searchText.charAt(i) === ' '\n        ) {\n          continue;\n        } else {\n          valid = false;\n          window.alert('Please use English-alphabetical letters!');\n          break;\n        }\n      }\n\n      // if above validation is 'true', do check localStorage, and setState accordingly\n      if (valid) {\n        setSearchResults(\n          await getStorage(\n            `AccuWeather_SearchResults_${searchText}`,\n            await getSearchResults.bind(this, searchText),\n          ),\n        );\n      }\n    }\n  };\n\n  // this keeps the search results in localStorage, because the data is static,\n  // it doesn't change from one request to another\n  useEffect(() => {\n    if (searchResults !== 'Error')\n      setStorage(`AccuWeather_SearchResults_${searchFieldText}`, searchResults);\n    // eslint-disable-next-line\n  }, [searchResults]);\n\n  return (\n    <div className={styles.component}>\n      <input\n        className={styles.input}\n        type='text'\n        placeholder='Search a city...'\n        value={searchFieldText}\n        onChange={doAutoComplete}\n      />\n\n      <div className={styles.list}>\n        {searchResults === 'Error' ? (\n          <div className={styles.listItem}>Error: API daily limit reached</div>\n        ) : (\n          searchResults.map((item) => (\n            <div\n              key={item.Key}\n              className={styles.listItem}\n              onClick={() => {\n                // --> will cause 2 API calls (in: <CurrentConditions /> && <FiveDaysForecast />)\n                setCityData(item);\n                setSearchFieldText('');\n                setSearchResults([]);\n              }}>\n              {item.LocalizedName}, {item.Country.ID}\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default SearchField;\n","import { useState, useEffect } from 'react';\nimport { getCurrentConditions } from '../../api/AccuWeatherAPI';\nimport styles from './style/CurrentConditions.module.css';\n\nexport default function CurrentConditions({ cityData }) {\n  const [currentConditions, setCurrentConditions] = useState('Loading');\n\n  useEffect(() => {\n    getCurrentConditions(cityData.Key).then((apiData) => {\n      setCurrentConditions(apiData);\n    });\n  }, [cityData]);\n\n  switch (currentConditions) {\n    case 'Loading':\n      return <div className={styles.component}>Loading...</div>;\n\n    case 'Error':\n      return <div className={styles.component}>Error: API daily limit reached</div>;\n\n    default:\n      return (\n        <div className={styles.component}>\n          <h5>\n            {cityData.LocalizedName} ({currentConditions.IsDayTime ? 'Day' : 'Night'})\n          </h5>\n          <img\n            src={`https://www.accuweather.com/images/weathericons/${currentConditions.WeatherIcon}.svg`}\n            alt='weather icon'\n          />\n          <p>\n            {currentConditions.Temperature.Metric.Value}°{currentConditions.Temperature.Metric.Unit}{' '}\n            / {currentConditions.Temperature.Imperial.Value}°\n            {currentConditions.Temperature.Imperial.Unit}\n            <br />\n            {currentConditions.WeatherText}\n          </p>\n        </div>\n      );\n  }\n}\n","import { useState, useEffect } from 'react';\nimport styles from './style/FiveDaysForecast.module.css';\nimport { getFiveDaysForecast } from '../../api/AccuWeatherAPI';\n\nexport default function FiveDaysForecast({ cityData }) {\n  const [fiveDaysForecast, setFiveDaysForecast] = useState('Loading');\n\n  // this useEffect is called every time the city data is changed,\n  // it fetches the forecast and sets it to state\n  useEffect(() => {\n    getFiveDaysForecast(cityData.Key).then((apiData) => setFiveDaysForecast(apiData));\n  }, [cityData]);\n\n  // this function translates epoch date to a verbal day\n  const getDayFromEpoch = (epoch) => {\n    let itemDate = new Date(epoch * 1000);\n    switch (itemDate.getDay()) {\n      case 0:\n        return 'Sunday';\n      case 1:\n        return 'Monday';\n      case 2:\n        return 'Tuesday';\n      case 3:\n        return 'Wednesday';\n      case 4:\n        return 'Thursday';\n      case 5:\n        return 'Friday';\n      case 6:\n        return 'Saturday';\n      default:\n        break;\n    }\n  };\n\n  switch (fiveDaysForecast) {\n    case 'Loading':\n      return <div className={styles.component}>Loading...</div>;\n\n    case 'Error':\n      return <div className={styles.component}>Error: API daily limit reached</div>;\n\n    default:\n      return (\n        <div className={styles.component}>\n          {fiveDaysForecast.map((item) => (\n            <div key={item.EpochDate} className={styles.item}>\n              <h5>{getDayFromEpoch(item.EpochDate)}</h5>\n              <p>\n                {\n                  // Formula: (x°F − 32) × 5/9 = y°C\n                  `High: ${parseInt(\n                    (item.Temperature.Maximum.Value - 32) * (5 / 9),\n                  )}°C / Low: ${parseInt((item.Temperature.Minimum.Value - 32) * (5 / 9))}°C`\n                }\n              </p>\n              <div className={styles.wrapper}>\n                <div>\n                  <h6>Day:</h6>\n                  <img\n                    className={styles.image}\n                    src={`https://www.accuweather.com/images/weathericons/${item.Day.Icon}.svg`}\n                    alt='WeatherIcon'\n                  />\n                </div>\n                <div>\n                  <h6>Night:</h6>\n                  <img\n                    className={styles.image}\n                    src={`https://www.accuweather.com/images/weathericons/${item.Night.Icon}.svg`}\n                    alt='WeatherIcon'\n                  />\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      );\n  }\n}\n","import { useState, useEffect, useCallback } from 'react';\nimport { getStorage, setStorage } from '../../js/localStorage';\nimport styles from './style/HomePage.module.css';\nimport SearchField from '../SearchField/SearchField';\nimport CurrentConditions from '../CurrentConditions/CurrentConditions';\nimport FiveDaysForecast from '../FiveDaysForecast/FiveDaysForecast';\n\nexport default function HomePage({ favorites, setFavorites }) {\n  // default (onLoad): value = look for data in {localStorage}, if none, set default value: ('Tel Aviv' cityData)\n  const [cityData, setCityData] = useState(\n    useCallback(\n      () =>\n        getStorage(`AccuWeather_CityData_215854`, {\n          AdministrativeArea: { ID: 'TA', LocalizedName: 'Tel Aviv' },\n          Country: { ID: 'IL', LocalizedName: 'Israel' },\n          Key: '215854',\n          LocalizedName: 'Tel Aviv',\n          Rank: 31,\n          Type: 'City',\n          Version: 1,\n        }),\n      [],\n    ),\n  );\n\n  // Keeps localStorage updated with changes made to: (cityData)\n  // data is static! does not change when fetched from API\n  useEffect(() => {\n    if (cityData !== 'Error') setStorage(`AccuWeather_CityData_${cityData.Key}`, cityData);\n  }, [cityData]);\n\n  // this function adds the city data to the favorites array\n  const addToFavorites = () => {\n    let copyOfFavorites = [...favorites],\n      valid = true;\n    // verify that this location doesn't already exist in favorites\n    for (let i = 0; i < copyOfFavorites.length; i++) {\n      if (copyOfFavorites[i].Key === cityData.Key) {\n        valid = false;\n        break;\n      }\n    }\n\n    if (valid) {\n      copyOfFavorites.push(cityData);\n      setFavorites(copyOfFavorites);\n    } else {\n      alert('Current city already in favorites!');\n    }\n  };\n\n  return (\n    <>\n      <SearchField setCityData={setCityData} />\n      <button className={styles.button} onClick={addToFavorites}>\n        Add to favorites\n      </button>\n\n      <CurrentConditions cityData={cityData} />\n      <FiveDaysForecast cityData={cityData} />\n    </>\n  );\n}\n","import styles from './style/FavoritesPage.module.css';\nimport CurrentConditions from '../CurrentConditions/CurrentConditions';\n\nfunction FavoritesPage({ favorites, setFavorites }) {\n  // this function filters-out the location selected for removal\n  const removeFromFavorites = (locationKey) => {\n    let copyOfFavorites = [...favorites];\n    let filteredCopyOfFavorites = copyOfFavorites.filter((fav) => fav.Key !== locationKey);\n    setFavorites(filteredCopyOfFavorites);\n  };\n\n  return (\n    <>\n      <div className={styles.favorites}>\n        {!favorites.length ? (\n          <div>No favorites added</div>\n        ) : (\n          favorites.map((item) => (\n            <div className={styles.item} key={item.Key}>\n              <span className={styles.delete} onClick={() => removeFromFavorites(item.Key)}>\n                &times;\n              </span>\n              <CurrentConditions cityData={item} />\n            </div>\n          ))\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default FavoritesPage;\n","import { useState, useEffect, useCallback } from 'react';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport './style/style.css';\nimport { getStorage, setStorage } from './js/localStorage';\nimport Header from './components/Header/Header';\nimport HomePage from './components/HomePage/HomePage';\nimport FavoritesPage from './components/FavoritesPage/FavoritesPage';\n\nfunction App() {\n  // default (onLoad): value = look for data in {localStorage}, if none, set default value: (empty Array)\n  const [favorites, setFavorites] = useState(\n    useCallback(() => getStorage('AccuWeather_Favorites', []), []),\n  );\n\n  // Keeps localStorage updated with changes made to: (favorites)\n  useEffect(() => {\n    setStorage('AccuWeather_Favorites', favorites);\n  }, [favorites]);\n\n  return (\n    <div className='app'>\n      <Router>\n        <Header />\n        <main className='main'>\n          <Switch>\n            <Route exact path='/'>\n              <HomePage favorites={favorites} setFavorites={setFavorites} />\n            </Route>\n            <Route exact path='/favorites'>\n              <FavoritesPage favorites={favorites} setFavorites={setFavorites} />\n            </Route>\n          </Switch>\n        </main>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}